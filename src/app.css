@import url("https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&display=swap");
@import url("https://fonts.googleapis.com/css2?family=Noto+Sans+Hebrew:wght@400;700&display=swap");

@import "tailwindcss";
@import "@catppuccin/tailwindcss/mocha.css";

@import "tailwindcss-animated";
@plugin "@tailwindcss/typography";

@custom-variant dark (&:where(.frappe, .frappe *, .macchiato, .macchiato *, .mocha, .mocha *));
@theme {
    --font-sans: "JetBrains Mono", sans-serif;
    --font-hebrew: "Noto Sans Hebrew", sans-serif;
}
* {
    box-sizing: border-box;
}
html {
    scroll-behavior: smooth;
}

main {
    -webkit-overflow-scrolling: touch; /* For smooth scrolling on iOS */
}

.skill-chip {
    @apply rounded-md bg-ctp-surface0 px-4 py-2 font-mono text-ctp-text shadow-md transition-all hover:scale-105 hover:text-ctp-base;
}
.skill-chip.c-green {
    @apply hover:bg-ctp-green;
}
.skill-chip.c-sky {
    @apply hover:bg-ctp-sky;
}

/* For Backend & Databases */
.skill-node {
    @apply w-3/4 rounded-lg bg-ctp-surface0 px-4 py-2 text-center font-mono text-ctp-text shadow-lg transition-all hover:scale-105 hover:text-ctp-base;
}

.skill-node.c-sky {
    @apply hover:bg-ctp-sky;
}
.section-animate {
    opacity: 0;
    transform: translateY(50px);
    transition:
        opacity 0.6s ease-out,
        transform 0.6s ease-out;
}

.section-animate.is-visible {
    opacity: 1;
    transform: translateY(0);
}

/* --- ASCII UI Styles --- */

.ascii-border {
    @apply border-2 border-ctp-surface0 p-4;
}

/* Base style for a clickable file line */
.ascii-file-container {
    @apply relative pl-4 pr-4; /* Add padding to make space for brackets */
}

/* Hide the brackets by default */
.ascii-file-container::before,
.ascii-file-container::after {
    content: "";
    @apply absolute top-0 text-ctp-mauve transition-opacity duration-150 opacity-0;
}

/* Show the brackets on hover/focus without causing a layout shift */
.ascii-file-container:hover::before,
.ascii-file-container:focus-within::before {
    content: "[";
    left: 0; /* Position in the padding */
    opacity: 1;
}
.ascii-file-container:hover::after,
.ascii-file-container:focus-within::after {
    content: "]";
    right: 0; /* Position in the padding */
    opacity: 1;
}

/* An ASCII-style horizontal rule made of characters */
.ascii-hr {
    @apply w-full text-left text-ctp-surface1 overflow-hidden whitespace-nowrap;
}
.ascii-hr::after {
    content: "---------------------------------------------------------------------------------------------------------";
}

/* --- High-Fidelity CRT Filter --- */
/* Define the --harshness variable on the root for global access */
:root {
    --harshness: 0.15; /* Default value */
}

/* This pseudo-element creates the phosphor glow and screen curvature */
body::before {
    content: " ";
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    /* The opacity now correctly reads the global --harshness variable */
    opacity: var(--harshness);
    background: radial-gradient(
        ellipse at center,
        rgba(80, 250, 123, 0.15) 0%,
        rgba(80, 250, 123, 0) 100%
    );
    pointer-events: none;
    z-index: 100;
    transform: scale(1.1, 1.3);
}

/* This pseudo-element creates the scanlines and noise/flicker */
body::after {
    content: " ";
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    /* The opacity here is now a multiple of the global --harshness variable */
    opacity: calc(var(--harshness) * 2);
    background: repeating-linear-gradient(
        0deg,
        rgba(0, 0, 0, 0.5) 0,
        rgba(0, 0, 0, 0.5) 1px,
        transparent 1px,
        transparent 3px
    );
    pointer-events: none;
    z-index: 101;
    animation: crt-noise 0.5s linear infinite;
}
/* FIX: CANT BE TURNED OFF WITH THE SLIDER */
/* This wrapper applies the text glow to the entire app */
.crt-wrapper {
    /* The text-shadow creates the green phosphor bloom effect */
    @apply text-shadow-ctp-green;
    filter: blur(0.5px);
    animation: crt-text-flicker 0.1s steps(1, end) infinite;
}

/* --- Keyframes for the Animations --- */

/* The noise animation creates the horizontal jitter */
@keyframes crt-noise {
    0% {
        background-position: 0 0;
    }
    10% {
        background-position: -2px -2px;
    }
    20% {
        background-position: 2px 2px;
    }
    30% {
        background-position: -1px -1px;
    }
    40% {
        background-position: 1px 1px;
    }
    50% {
        background-position: 0 0;
    }
    60% {
        background-position: -2px 2px;
    }
    70% {
        background-position: 2px -2px;
    }
    80% {
        background-position: -1px 1px;
    }
    90% {
        background-position: 1px -1px;
    }
    100% {
        background-position: 0 0;
    }
}

/* The text flicker adds to the instability of the display */
@keyframes crt-text-flicker {
    0%,
    100% {
        opacity: 1;
    }
    50% {
        opacity: 0.95;
    }
}

/* We still need this for the <CRTFilter> component to hook into */
.crt-filter {
    --harshness: 0.15; /* This will be controlled by your slider */
}
